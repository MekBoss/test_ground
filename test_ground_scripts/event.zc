//most things here use info attached to sectors/lines in map editor
//so copypasting for some other projects can, and would, cause problems
class test_ground_event : eventhandler
{
private actor temp_arena_center;

private sector monster_spawn, item_spawn, weapon_spawn, battle_arena;
private sector jump_pillar_sector;
private array<sector> jump_pillar_aditional;

private void ground_freeze_actor(actor a)
{
    if(a)
    {
        a.tics = -1;
        a.bdormant = true;
        if(!temp_arena_center)
            temp_arena_center = actor.spawn("healthbonus", ground_get_sector_center(battle_arena) );

        if(temp_arena_center)
            a.a_face(temp_arena_center);
    }
}

private vector3 ground_get_sector_center(sector s = null)
{
    if(s)
        return(s.centerspot, s.CenterFloor() );

    else
        return (0, 0, 0);
}



private void ground_init_monsters()
{
    switch(gameinfo.gametype)
    {
        case GAME_Doom:
        default:
            grounds_init_doom_monsters();
        break;
    }
    if(temp_arena_center)
        temp_arena_center.destroy();
}

private void grounds_init_doom_monsters()
{
    for(uint i = 0; i < level.sectors.size(); i++)
    {
        string st = "";
        st = level.sectors[i].GetUDMFString("user_doom_monster_type");
        class<actor> at = st;

        if(st.length() > 0)
        {
            //console.printf("some weapon, sector %i, type %s", i, st);
            if(at)
                ground_freeze_actor( actor.spawn(st, ground_get_sector_center(level.sectors[i]) ) );
            else
                console.printf("unknown monster, sector %i, type %s", i, st);
        }
    }
}




//ammo and backpack counts as weapons
private void ground_init_weapons()
{
    for(uint i = 0; i < level.sectors.size(); i++)
    {
        string st = "";
        st = level.sectors[i].GetUDMFString("user_doom_weapon_sector");
        class<actor> at = st;

        if(st.length() > 0)
        {
            //console.printf("some weapon, sector %i, type %s", i, st);
            if(at)
                actor.spawn(st, ground_get_sector_center(level.sectors[i]) );
            else
                console.printf("unknown weapon/ammo, sector %i, type %s", i, st);
        }
    }
}

private void ground_init_items()
{
    for(uint i = 0; i < level.sectors.size(); i++)
    {
        string st = "";
        st = level.sectors[i].GetUDMFString("user_doom_item_sector");
        class<actor> at = st;

        if(st.length() > 0)
        {
            //console.printf("some weapon, sector %i, type %s", i, st);
            if(at)
                actor.spawn(st, ground_get_sector_center(level.sectors[i]) );
            else
                console.printf("unknown item, sector %i, type %s", i, st);
        }
    }
}

private void ground_init_spec_sectors()
{
    for(uint i = 0; i < level.sectors.size(); i++)
    {
        int st = 0;
        st = level.sectors[i].GetUDMFInt("user_weapon_spawn_sector");
        if(st > 0)
        {
            //console.printf("weapon sector %i", i);
            weapon_spawn = level.sectors[i];
        }

        st = level.sectors[i].GetUDMFInt("user_item_spawn_sector");
        if(st > 0)
        {
            //console.printf("item sector %i", i);
            item_spawn = level.sectors[i];
        }

        st = level.sectors[i].GetUDMFInt("user_monster_spawn_sector");
        if(st > 0)
        {
            //console.printf("monster sector %i", i);
            monster_spawn = level.sectors[i];
        }

        st = level.sectors[i].GetUDMFInt("user_battle_arena");
        if(st > 0)
        {
            //console.printf("battle sector %i", i);
            battle_arena = level.sectors[i];
        }

        st = level.sectors[i].GetUDMFInt("user_jump_pillar_sector");
        if(st > 0)
        {
            //console.printf("battle sector %i", i);
            jump_pillar_sector = level.sectors[i];
        }
        
        st = level.sectors[i].GetUDMFInt("user_jump_pillar_additional");
        if(st > 0)
        {
            //console.printf("battle sector %i", i);
            sector s = level.sectors[i];
            jump_pillar_aditional.push(s);
        }
    }
}

override void worldloaded(worldevent e)
{
    ground_init_spec_sectors();
    ground_init_monsters();
    ground_init_weapons();
    ground_init_items();
}



private void ground_spawn_weapon(class<actor> type = null)
{
    if(type)
        actor.spawn(type, ground_get_sector_center(weapon_spawn), ALLOW_REPLACE).bdropped = false;
}

private void ground_spawn_item(class<actor> type = null)
{
    if(type)
    {
        actor.spawn(type, ground_get_sector_center(item_spawn), ALLOW_REPLACE).bdropped = false;
    }
}

private void ground_spawn_monster(class<actor> type = null)
{
    if(type)
    {
        if(type == 'demon' && random[ground_monster](0, 1) == 1)
            type = 'spectre';

        actor.spawn(type, ground_get_sector_center(monster_spawn), ALLOW_REPLACE).angle = 225;
    }
}

private void ground_move_jump_pillar(bool up = true)
{
    if(up)
    {
        jump_pillar_sector.MoveFloor(10, -(jump_pillar_sector.CenterFloor() + 10), 0, 1, 0, true);
        jump_pillar_sector.MoveCeiling(10, jump_pillar_sector.CenterCeiling() + 10, 0, 1, 0);

        
        for(uint i = 0; i < jump_pillar_aditional.size(); i++)
            jump_pillar_aditional[i].MoveCeiling(10, jump_pillar_aditional[i].CenterCeiling() + 10, 0, 1, 0);
    }

    else
    {
        jump_pillar_sector.MoveFloor(10, -(jump_pillar_sector.CenterFloor() - 10), 0, -1, 0);
        jump_pillar_sector.MoveCeiling(10, jump_pillar_sector.CenterCeiling() - 10, 0, -1, 0);

        for(uint i = 0; i < jump_pillar_aditional.size(); i++)
            jump_pillar_aditional[i].MoveCeiling(10, jump_pillar_aditional[i].CenterCeiling() - 10, 0, 1, 0);
    }
}

private void ground_destroy_actors_in_sector(sector s)
{
    if(s)
    {
        array<actor> list; list.clear();

		for (Actor a = s.thinglist; a != null; a = a.snext)
		{
            list.push(a);
        }

        for(uint i = 0; i < list.size(); i++)
            list[i].destroy();
    }
}

override void WorldLinePreActivated(WorldEvent e)
{
    if(e.ActivatedLine)
    {
        string st = e.activatedline.getUDMFstring("user_doom_spawn_type");
        if(st.length() > 0)
        {
            e.ShouldActivate = false;
            ground_spawn_monster(st);
            return;
        }

        st = e.activatedline.getUDMFstring("user_spawn_doom_weapon");
        if(st.length() > 0)
        {
            e.ShouldActivate = false;
            ground_spawn_weapon(st);
            return;
        }

        st = e.activatedline.getUDMFstring("user_spawn_doom_item");
        if(st.length() > 0)
        {
            ground_spawn_item(st);
            e.ShouldActivate = false;
            return;
        }

        st = e.activatedline.getUDMFstring("user_clear_sector");
        if(st.length() > 0)
        {
            e.ShouldActivate = false;
            switch(name(st) )
            {
                default:
                break;

                case 'weapon':
                    ground_destroy_actors_in_sector(weapon_spawn);
                break;

                case 'item':
                    ground_destroy_actors_in_sector(item_spawn);
                break;
            }
            return;
        }

        st = e.activatedline.getUDMFstring("user_move_jump_pillar");
        if(st.length() > 0)
        {
            e.ShouldActivate = false;
            if(st == "up")
                ground_move_jump_pillar();

            if(st == "down")
                ground_move_jump_pillar(false);
        }

        st = e.activatedline.getUDMFstring("user_tooltip");
        if(st.length() > 0)
        {
            //should be player, so
            e.thing.A_Print(st, 0);
            e.ShouldActivate = false;
        }
    }
}

}